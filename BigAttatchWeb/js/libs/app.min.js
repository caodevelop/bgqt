(function ($) {
    $.fn.extend({
        fieldsToJson: function () {
            var o = {}, a;
            if (this[0].tagName !== "FORM") {
                var tmp = $("<form/>").append(this.clone());
                a = tmp.serializeArray();
                tmp = null
            } else {
                a = this.serializeArray()
            }
            jQuery.each(a, function () {
                var i = this.name.indexOf("[]"), isArr = !(i === -1), prop = isArr ? this.name.substr(0, i) : this.name, val = jQuery.trim(this.value + "") || "";
                if (o[prop]) {
                    if (!o[prop].push) o[prop] = [o[prop]];
                    o[prop].push(val)
                } else {
                    if (isArr) {
                        o[prop] = [];
                        o[prop][0] = val
                    } else o[prop] = val
                }
            });
            return o
        }, jsonToFields: function (jsonObject) {
            this.find("input,select,textarea").each(function () {
                if (!this.name) {
                    if (this.id) this.name = this.id; else return
                }
                var elName = this.name.split("[]")[0];
                var val = jsonObject[elName];
                if (this.type == "checkbox" || this.type == "radio") {
                    var a = jQuery.isArray(val) ? val : [val];
                    var v = jQuery.isNumeric(this.value) ? parseInt(this.value, 10) : this.value;
                    for (var i = 0; i < a.length; i++) {
                        if (a[i] == v) {
                            this.checked = true;
                            break
                        }
                    }
                } else if (this.type.indexOf("select-") != -1) {
                    jQuery(this).recheckElement(val)
                } else if (this.tagName.toLowerCase() == "textarea") {
                    $(this).val(val)
                } else {
                    if (val === undefined) val = "";
                    this.value = val
                }
            });
            return this
        }
    });
    (function (jQuery) {
        var boundCache = {
            m_Count: 0, make: function (sets) {
                var template = sets.template, cache = { name: template }, nullShown = sets["nullShown"] || "";
                pnter = /{\w+(:=)+\w+}/g, rnderFns = template.match(pnter), renderEvalStr = 'row[":index"]=i;';
                if (rnderFns) {
                    var _attr, _ndex, keyName;
                    for (var fs = 0; fs < rnderFns.length; fs++) {
                        _attr = rnderFns[fs].substr(1, rnderFns[fs].length - 2);
                        _ndex = _attr.indexOf(":=");
                        keyName = _attr.substr(0, _ndex);
                        renderEvalStr += "row['" + _attr + "']=scope['" + _attr.substr(_ndex + 2) + "'](row['" + keyName + "'] , i , row ,'" + keyName + "') ;"
                    }
                }
                var pattern = /\{(\w*[:]*[=]*\w+)\}(?!})/g, str = template.replace(pattern, function (match, key, i) {
                    return "'+((row['" + key + "']===null||row['" + key + "']===undefined)?'" + nullShown + "':row['" + key + "'])+'"
                });
                renderEvalStr += "var out='" + str + "';return out;";
                cache["render"] = new Function("row", "i", "scope", renderEvalStr);
                if (sets.mode) cache.mode = sets.mode;
                if (sets.itemRender) cache.itemRender = sets.itemRender;
                if (sets.itemFilter) cache.itemFilter = sets.itemFilter;
                if (sets.onBound) cache.onBound = sets.onBound;
                cache.joiner = sets.joiner || "";
                cache.storeData = !!sets.storeData;
                return cache
            }, newId: function () {
                return "_Object__id" + this.m_Count++
            }, remove: function (id) {
                delete this[id]
            }
        };
        jQuery.fn.bindList = function (sets) {
            var _this_ = this[0], cacheId = _this_.id || _this_.uniqueID || function () {
                _this_.id = boundCache.newId();
                return _this_.id
            }();
            var cache = boundCache[cacheId] || {}, template, list, itemRender, itemFilter, mode, storeData, storeArray;
            if (sets.push && sets.slice) {
                list = sets;
                itemRender = cache.itemRender;
                itemFilter = cache.itemFilter;
                mode = cache.mode;
                storeData = cache.storeData
            } else {
                template = sets.template;
                if (template !== undefined && cache["name"] != template) {
                    cache = boundCache.make(sets);
                    boundCache[cacheId] = cache
                }
                list = sets.list;
                itemRender = sets.itemRender || cache.itemRender;
                itemFilter = sets.itemFilter || cache.itemFilter;
                mode = sets.mode || cache.mode;
                storeData = !!sets.storeData
            }
            var scope = itemRender || window, html = [], i = 0, nb = 0, rowObject, useFilter = typeof itemFilter === "function";
            if (storeData) storeArray = [];
            for (; rowObject = list[i];) {
                if (useFilter) rowObject = itemFilter(rowObject, i);
                if (rowObject) {
                    rowObject[":rowNum"] = ++nb;
                    html[i] = cache["render"](rowObject, i, scope);
                    if (storeData) storeArray.push(rowObject)
                }
                ++i
            }
            switch (mode) {
                case "append":
                    this.append(html.join(cache["joiner"]));
                    break;
                case "prepend":
                    this.prepend(html.join(cache["joiner"]));
                    break;
                case "after":
                    this.after(html.join(cache["joiner"]));
                    break;
                case "before":
                    this.before(html.join(cache["joiner"]));
                    break;
                default:
                    if (document.all) this.html(html.join(cache["joiner"])); else _this_.innerHTML = html.join(cache["joiner"])
            }
            if (typeof cache.onBound === "function") {
                cache.onBound.call(this, list, sets)
            }
            if (storeData) this.data("bound-array", storeArray);
            return this
        };
        jQuery.fn.bindLists = function (sets) {
            var cache;
            if (sets.mode === "setCache") cache = sets.cache; else cache = boundCache.make(sets);
            this.each(function (i, o) {
                var cacheId = o.id || o.uniqueID || function () {
                    o.id = boundCache.newId();
                    return o.id
                }();
                boundCache[cacheId] = cache
            });
            if (jQuery.isArray(sets.lists)) {
                var len = Math.min(this.size(), sets.lists.length);
                for (var j = 0; j < len; j++) {
                    sets.list = sets.lists[j];
                    this.eq(j).bindList(sets)
                }
                if (typeof sets.onAllComplete === "function") {
                    sets.onAllComplete.call(this, sets.lists, sets)
                }
            }
            if (sets.mode === "getCache") {
                return cache
            }
            return this
        }
    })($)
})(jQuery);
(function ($, win) {
    var app = { global: { debug: 0 } };
    app.EMPTY_FN = $.noop;
    app.PREVENT_FN = function () {
        return false
    };
    app.request = function () {
        var ret = {}, a = window.location, seg = a.search.replace(/^\?/, "").split("&"), len = seg.length, i = 0, s;
        for (; i < len; i++) {
            if (!seg[i]) {
                continue
            }
            s = seg[i].split("=");
            try {
                ret[s[0]] = decodeURI(s[1])
            } catch (e) {
                ret[s[0]] = s[1]
            }
        }
        return ret
    }();
    app.cookie = function (name, value, options) {
        if (typeof value != "undefined") {
            options = options || {};
            if (value === null) {
                value = "";
                options.expires = -1
            }
            if (typeof value === "object" && JSON.stringify) {
                value = JSON.stringify(value)
            }
            var expires = "";
            if (options.expires && (typeof options.expires == "number" || options.expires.toUTCString)) {
                var date;
                if (typeof options.expires == "number") {
                    date = new Date;
                    date.setTime(date.getTime() + options.expires * 24 * 60 * 60 * 1e3)
                } else {
                    date = options.expires
                }
                expires = "; expires=" + date.toUTCString()
            }
            var path = options.path ? "; path=" + options.path : "";
            var domain = options.domain ? "; domain=" + options.domain : "";
            var secure = options.secure ? "; secure" : "";
            document.cookie = [name, "=", encodeURIComponent(value), expires, path, domain, secure].join("")
        } else {
            var cookieValue = null;
            if (document.cookie && document.cookie != "") {
                var cookies = document.cookie.split(";");
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    if (cookie.substring(0, name.length + 1) == name + "=") {
                        try {
                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1))
                        } catch (e) {
                            cookieValue = cookie.substring(name.length + 1)
                        }
                        break
                    }
                }
            }
            if (jQuery.evalJSON && cookieValue && cookieValue.match(/^\s*\{/)) {
                try {
                    cookieValue = jQuery.evalJSON(cookieValue)
                } catch (e) {
                }
            }
            return cookieValue
        }
    };
    app.formatString = function (template, params) {
        if (arguments.length == 1) return function () {
            var args = $.makeArray(arguments);
            args.unshift(template);
            return $.validator.format.apply(this, args)
        };
        if (arguments.length > 2 && params.constructor != Array) {
            params = $.makeArray(arguments).slice(1)
        }
        if (params.constructor != Array) {
            params = [params]
        }
        $.each(params, function (i, n) {
            template = template.replace(new RegExp("\\{" + i + "\\}", "g"), n)
        });
        return template
    };
    app.formatJSON = function () {
        var pattern = /\{(\w*[:]*[=]*\w+)\}(?!})/g;
        return function (template, json) {
            return template.replace(pattern, function (match, key, value) {
                return json[key]
            })
        }
    }();
    app.addSeconds = function (d, s) {
        return new Date(d.getTime() + s * 1e3)
    };
    app.addDays = function (d, s) {
        return new Date(d.getTime() + s * 24 * 3600 * 1e3)
    };
    app.daySpan = function (dateTo, dateFrom) {
        return Math.round((dateTo.valueOf() - dateFrom.valueOf()) / 864e5)
    };
    app.weekSpan = function (dateTo, dateFrom) {
        var d = app.daySpan(dateTo, dateFrom);
        return Math.ceil((d + dateFrom.getDay()) / 7)
    };
    app.formatDate = function (date, formater) {
        var format = formater || "yyyy-MM-dd";
        var o = {
            "M+": date.getMonth() + 1,
            "d+": date.getDate(),
            "h+": date.getHours(),
            "m+": date.getMinutes(),
            "s+": date.getSeconds(),
            "q+": Math.floor((date.getMonth() + 3) / 3),
            S: date.getMilliseconds()
        };
        if (/(y+)/.test(format)) format = format.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
        for (var k in o) if (new RegExp("(" + k + ")").test(format)) format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
        return format
    };
    app.parseDate = function (str, formater) {
        var format = formater || "yyyy-MM-dd hh:mm:ss";
        var parts = str.match(/(\d+)/g), i = 0, fmt = {};
        format.replace(/(yyyy|dd|MM|hh|mm|ss)/g, function (part) {
            fmt[part] = i++
        });

        return new Date(
            parts[fmt["yyyy"]],
            parts[fmt["MM"]] - 1,
            parts[fmt["dd"]],
            parts[fmt["hh"]],
            parts[fmt["mm"]],
            parts[fmt["ss"]]);
    };
    app.timeStamp = function () {
        var n = new Date, f = new Date(2012, 11, 22);
        return (n.valueOf() - f.valueOf()).toString()
    };
    app.random = function (len) {
        return (Math.random() * Math.random()).toString().substr(2, len || 9)
    };
    app.uuid = function () {
        var CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
        return function (len, radix) {
            var chars = CHARS, uuid = [];
            radix = radix || chars.length;
            if (len) {
                for (var i = 0; i < len; i++)uuid[i] = chars[0 | Math.random() * radix]
            } else {
                var r;
                uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-";
                uuid[14] = "4";
                for (var i = 0; i < 36; i++) {
                    if (!uuid[i]) {
                        r = 0 | Math.random() * 16;
                        uuid[i] = chars[i == 19 ? r & 3 | 8 : r]
                    }
                }
            }
            return uuid.join("")
        }
    }();
    app.convertImageToBase64 = function (img) {
        var canvas = document.createElement("canvas");
        canvas.width = img.width;
        canvas.height = img.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        var dataURL = canvas.toDataURL("image/png");
        return dataURL.replace(/^data:image\/(png|jpg);base64,/, "")
    };
    app.preloadImage = function (url, onLoad, onError) {
        var img = new Image;
        img.onload = function () {
            img.onload = null;
            if (typeof onLoad === "function") onLoad(img);
            img = null
        };
        img.onerror = function () {
            img.onerror = null;
            img = null;
            if (typeof onError === "function") onError()
        };
        img.src = url
    };
    app.loadFile = function (filename, filetype, onLoad, onError) {
        onLoad = onLoad || app.EMPTY_FN;
        onError = onError || app.EMPTY_FN;
        var fileref;
        if (filetype === "js") {
            var ss = document.getElementsByTagName("script");
            for (i = 0; i < ss.length; i++) {
                if (ss[i].src && ss[i].src.indexOf(filename) != -1) {
                    if ($.isFunction(onLoad)) {
                        return onLoad();
                    }
                }
            }
            fileref = document.createElement("script");
            document.getElementsByTagName("head")[0].appendChild(fileref);
            fileref.setAttribute("type", "text/javascript");
            fileref.setAttribute("src", filename)
        } else if (filetype === "css") {
            if (document.createStyleSheet) {
                fileref = document.createStyleSheet(filename)
            } else {
                fileref = document.createElement("link");
                document.getElementsByTagName("head")[0].appendChild(fileref);
                fileref.setAttribute("rel", "stylesheet");
                fileref.setAttribute("type", "text/css");
                fileref.setAttribute("href", filename)
            }
        }
        fileref.onload = fileref.onreadystatechange = function () {
            if (this.readyState && this.readyState == "loading") return;
            if ($.isFunction(onLoad)) {
                onLoad();
                onLoad = null
            }

        };
        fileref.onerror = function () {
            document.getElementsByTagName("head")[0].removeChild(fileref);
            if ($.isFunction(onError)) {
                onError();
                onError = null
            }

        };
        return fileref
    };
    app.removeFile = function (filename, filetype) {
        var targetelement = filetype == "js" ? "script" : filetype == "css" ? "link" : "none";
        var targetattr = filetype == "js" ? "src" : filetype == "css" ? "href" : "none";
        var allsuspects = document.getElementsByTagName(targetelement);
        for (var i = allsuspects.length; i >= 0; i--) {
            if (allsuspects[i] && allsuspects[i].getAttribute(targetattr) != null && allsuspects[i].getAttribute(targetattr).indexOf(filename) != -1) allsuspects[i].parentNode.removeChild(allsuspects[i])
        }
    };
    app.HTML = {
        encode: function (html) {
            var temp = document.createElement("div");
            temp.innerText ? temp.innerText = html : temp.textContent = html;
            var output = temp.innerHTML;
            temp = null;
            return output
        }, decode: function (html) {
            var temp = document.createElement("div");
            temp.innerHTML = html;
            var output = temp.innerText || temp.textContent;
            temp = null;
            return output
        }, desEncode: function (str) {
            var res = [];
            for (var i = 0; i < str.length; i++)res[i] = str.charCodeAt(i);
            return "&#" + res.join(";&#") + ";"
        }, hexEncode: function (str) {
            var res = [];
            for (var i = 0; i < str.length; i++)res[i] = str.charCodeAt(i).toString(16);
            return "&#x" + res.join(";&#x") + ";"
        }, encodeSBC: function (s) {
            var r = "", c;
            for (var i = 0; i < s.length; i++) {
                c = s.charCodeAt(i);
                r += c < 32 || c == 38 || c > 127 ? "&#" + c + ";" : s.charAt(i)
            }
            return r
        }, desHexDecode: function (str) {
            return str.replace(/&#(x)?([^&]{1,5});?/g, function ($, $1, $2) {
                return String.fromCharCode(parseInt($2, $1 ? 16 : 10))
            })
        }, toDBC: function (input) {
            var res = "", c;
            for (var i = 0; i < input.length; i++) {
                c = input.charCodeAt(i);
                if (c >= 65281 && c <= 65374) res += String.fromCharCode(c - 65248); else if (c == 12288) res += String.fromCharCode(32); else res += input.charAt(i)
            }
            return res
        }, toSBC: function (input) {
            var res = "", c;
            for (var i = 0; i < input.length; i++) {
                c = input.charCodeAt(i);
                if (c >= 33 && c <= 126) res += String.fromCharCode(c + 65248); else if (c == 32) res += String.fromCharCode(12288); else res += input.charAt(i)
            }
            return res
        }, toUTF8: function (str) {
            if (typeof str !== "string") {
                throw new TypeError("toUTF8 function only accept a string as its parameter.")
            }
            var ret = [];
            var c1, c2, c3;
            var cc = 0;
            for (var i = 0, l = str.length; i < l; i++) {
                cc = str.charCodeAt(i);
                if (cc > 65535) {
                    throw new Error("InvalidCharacterError")
                }
                if (cc > 128) {
                    if (cc < 2047) {
                        c1 = String.fromCharCode(cc >>> 6 | 192);
                        c2 = String.fromCharCode(cc & 63 | 128);
                        ret.push(c1, c2)
                    } else {
                        c1 = String.fromCharCode(cc >>> 12 | 224);
                        c2 = String.fromCharCode(cc >>> 6 & 63 | 128);
                        c3 = String.fromCharCode(cc & 63 | 128);
                        ret.push(c1, c2, c3)
                    }
                } else {
                    ret.push(str[i])
                }
            }
            return ret.join("")
        }, fromUTF8: function (str) {
            if (typeof str !== "string") {
                throw new TypeError("fromUTF8 function only accept a string as its parameter.")
            }
            if (/[^\x20-\xEF]/.test(str)) {
                throw new Error("InvalidCharacterError")
            }
            var ret = [];
            var cc = 0;
            var ct = 0;
            for (var i = 0, l = str.length; i < l;) {
                cc = str.charCodeAt(i++);
                if (cc > 224) {
                    ct = (cc & 15) << 12;
                    cc = str.charCodeAt(i++);
                    ct |= (cc & 63) << 6;
                    cc = str.charCodeAt(i++);
                    ct |= cc & 63;
                    ret.push(String.fromCharCode(ct))
                } else if (cc > 192) {
                    ct = (cc & 31) << 6;
                    cc = str.charCodeAt(i++);
                    ct |= (cc & 63) << 6;
                    ret.push(String.fromCharCode(ct))
                } else if (cc > 128) {
                } else {
                    ret.push(str[i])
                }
            }
            return ret.join("")
        }
    };
    var Validate = {};
    Validate.isset = function (string) {
        return !!string
    };
    Validate.empty = function (string) {
        return String(string).replace(/\s+/g, "").length == 0
    };
    Validate.required = function (str) {
        return !Validate.empty(str)
    };
    Validate.email = function (string) {
        return /[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/i.test(string)
    };
    Validate.url = function (string) {
        return /[-a-zA-Z0-9@:%_\+.~#?&\/\/=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)?/i.test(string)
    };
    Validate.date = function (string, preutc) {
        var date = Date.parse(string);
        if (isFinite(date)) {
            return true
        }
        if (preutc) {
            var now = new Date;
            string = string.replace(/\d{4}/, now.getFullYear());
            date = Date.parse(string);
            return isFinite(date)
        }
        return false
    };
    Validate.time = function (string) {
        var checkValue = new RegExp("^/[0-2]{1}/[0-6]{1}:/[0-5]{1}/[0-9]{1}:/[0-5]{1}/[0-9]{1}");
        return checkValue.test(string)
    };
    Validate.zip = function (string, plus4) {
        var pattern = plus4 ? /^\d{5}-\d{4}$/ : /^\d{5}$/;
        return pattern.test(string)
    };
    Validate.phone = function (string) {
        return /^\(?([0-9]{3})\)?[-.\s]?([0-9]{3})[-.\s]?([0-9]{4})$/.test(string)
    };
    Validate.integer = function (string) {
        return /^\-?\d+$/.test(string)
    };
    Validate.numeric = function (string) {
        return /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(string)
    };
    Validate.currency = function (string, us) {
        return /^\$-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(string)
    };
    Validate.ip = function (string) {
        return /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/.test(string)
    };
    Validate.ssn = function (string) {
        return /^\d{3}-\d{2}-\d{4}$/.test(string)
    };
    Validate.tin = function (string) {
        return /^\d{2}-\d{7}$/.test(string)
    };
    Validate.base64 = function (string) {
        return /[^a-zA-Z0-9\/\+=]/i.test(string)
    };
    Validate.alpha = function (string) {
        return /^[a-z]$/i.test(string)
    };
    Validate.alphaNumeric = function (string) {
        return /^[a-z0-9]$/i.test(string)
    };
    Validate.lowercase = function (string) {
        return string.toLowerCase() == string
    };
    Validate.uppercase = function (string) {
        return string.toUpperCase() == string
    };
    Validate.minlength = function (string, length) {
        return string.length >= length
    };
    Validate.maxlength = function (string, length) {
        return string.length <= length
    };
    Validate.between = function (string, min, max) {
        return string.length >= min && string.length <= max
    };
    app.validate = Validate;
    app.sortOn = function (arr, prop, sortCompareFunction) {
        if (sortCompareFunction && typeof sortCompareFunction === "function") return arr.sort(sortCompareFunction); else {
            var dup = Array.prototype.slice.call(arr, 0);
            if (!arguments.length) return dup.sort();
            return dup.sort(function (a, b) {
                var A = a[prop], nA = isNaN(A), B = b[prop], nB = isNaN(B);
                if (nA && nB) {
                    if (A === "") return -1;
                    if (B === "") return 1;
                    return A === B ? 0 : A > B ? 1 : -1
                } else if (nA) return -1; else if (nB) return 1;
                return A === B ? 0 : A > B ? 1 : -1
            })
        }
    };
    app.delayExecute = function (check, proc, chkInterval) {
        var x = chkInterval || 100;
        var hhd = win.setInterval(function () {
            if (check()) {
                win.clearInterval(hhd);
                proc()
            }
        }, x)
    };
    app.domainData = function (url, fn, localUrl) {
        var isFirst = true;
        var iframe = document.createElement("iframe");
        iframe.style.display = "none";
        var loadfn = function () {
            if (isFirst) {
                iframe.contentWindow.location = localUrl;
                isFirst = false
            } else {
                fn(iframe.contentWindow.name);
                iframe.contentWindow.document.write("");
                iframe.contentWindow.close();
                document.body.removeChild(iframe);
                iframe.src = "";
                iframe = null
            }
        };
        iframe.src = url;
        if (iframe.attachEvent) {
            iframe.attachEvent("onload", loadfn)
        } else {
            iframe.onload = loadfn
        }
        document.body.appendChild(iframe)
    };
    var matched = function (ua) {
        ua = ua.toLowerCase();
        var match = /(opr)[\/]([\w.]+)/.exec(ua) || /(chrome)[ \/]([\w.]+)/.exec(ua) || /(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
        var platform_match = /(ipad)/.exec(ua) || /(iphone)/.exec(ua) || /(android)/.exec(ua) || /(windows phone)/.exec(ua) || /(win)/.exec(ua) || /(mac)/.exec(ua) || /(linux)/.exec(ua) || /(cros)/i.exec(ua) || [];
        return { browser: match[3] || match[1] || "", version: match[2] || "0", platform: platform_match[0] || "" }
    }(window.navigator.userAgent);
    var browser = {};
    if (matched.browser) {
        browser[matched.browser] = true;
        browser.version = matched.version;
        browser.versionNumber = parseInt(matched.version, 10)
    }
    if (matched.platform) {
        browser[matched.platform] = true
    }
    if (browser.chrome || browser.opr || browser.safari) {
        browser.webkit = true
    }
    if (browser.rv) {
        var ie = "msie";
        matched.browser = ie;
        browser[ie] = true
    }
    if (browser.opr) {
        var opera = "opera";
        matched.browser = opera;
        browser[opera] = true
    }
    if (browser.safari && browser.android) {
        var android = "android";
        matched.browser = android;
        browser[android] = true
    }
    browser.name = matched.browser;
    browser.platform = matched.platform;
    app.browser = browser;
    $.browser = app.browser;
    app.deepClone = function (sObj) {
        return JSON.parse(JSON.stringify(sObj))
    };
    win.app = app;
    win.log = function () {
        if (win.app.global.debug) {
            if (!!window.console) {
                function mkArg(l) {
                    var args = [];
                    while (l--) args[l] = l;
                    return "arguments[" + args.join("],arguments[") + "]"
                }
                window.log = function () {
                    eval("console.log(" + mkArg(arguments.length) + ")")
                };
                window.log.error = function () {
                    eval("console.error(" + mkArg(arguments.length) + ")")
                };
                window.log.warn = function () {
                    eval("console.warn(" + mkArg(arguments.length) + ")")
                }
            } else {
                document.write('<div id="appLogTracer001"></div>');
                var e = document.getElementById("appLogTracer001");
                window.log = function () {
                    if (e.scrollHeight > 600) e.innerHTML = ""; else e.innerHTML += "<p>";
                    for (var i = 0, len = arguments.length; i < len; i++) {
                        e.innerHTML += (JSON.stringify(arguments[i]) || arguments[i]) + " "
                    }
                }
            }
        } else {
            window.log = function () {
            }
        }
    }
})(jQuery, window);
(function (app, win) {
    app.ajaxSetupSettings = {
        beforeSend: function (jqXhr, settings) {
            if (app.beforeSendFn && $.isFunction(app.beforeSendFn)) {
                app.beforeSendFn(jqXhr, settings)
            }
        },
        complete: function (jqXhr, textStatus) {
            if (app.completeFn && $.isFunction(app.completeFn)) {
                app.completeFn(jqXhr, textStatus)
            }
        },
        headers: {},
        cache: false,
        timeout: 360000,
        dataType: "json",
        error: function (jqXhr, textStatus, errorThrown) {
            var ajaxObj = this;
            if (app.errorFn && $.isFunction(app.errorFn)) {
                return app.errorFn(jqXhr, textStatus, errorThrown, ajaxObj)
            }
            var code = jqXhr.status;
            if (app.global.ajaxErrorFn) {
                app.global.ajaxErrorFn(code, jqXhr, textStatus, errorThrown, ajaxObj)
            } else {
                if (code === 0 || code === 200) return;
                if (code === 401 || code === 403) {
                    var defaultUri = app.global.defaultUri;
                    if (defaultUri) {
                        window.location.assign(defaultUri)
                    } else {
                        console.error("未配置登录页")
                    }
                } else {
                    console.error("服务器错误：" + code + "，" + errorThrown)
                }
            }
        }
    };
    var srvFn = function (url) {
        if (!app.global.debug) {
            this.url = app.global.remoteBaseUri + url
        } else {
            this.url = url
        }
    };

    function makeParam(data, callback, type) {
        var that = this;
        var fn = function (json) {
            if (json.error) srvFn.prototype.handleError.call(that, json.error); else typeof data === "function" ? data(json) : callback(json)
        }, param = callback ? data : null, vType = typeof type === "string" ? type : typeof callback === "string" ? callback : undefined;
        return [this.url, param, fn, vType]
    }

    srvFn.prototype = {
        handleError: function (err) {
            if (typeof this.onError === "function") this.onError(err); else {
                if (app.ajaxJsonErrorFn && $.isFunction(app.ajaxJsonErrorFn)) {
                    app.ajaxJsonErrorFn(err)
                }
            }
        }, toString: function () {
            return this.url
        }, getJSON: function (data, callback) {
            return $.getJSON.apply(this, makeParam.call(this, data, callback, "json"))
        }, get: function (data, callback, type) {
            return $.get.apply(this, makeParam.call(this, data, callback, type))
        }, post: function (data, callback, type) {
            return $.post.apply(this, makeParam.call(this, data, callback, type))
        }
    };
    app.basepage = {
        server: function (uriList) {
            var srv = {
                add: function (uriHashSet) {
                    var key;
                    for (key in uriHashSet) this[key] = new srvFn(uriHashSet[key])
                }
            };
            srv.add(uriList);
            app.server = srv;
            return srv
        }
    };
    app.initPage = function () {
        var Page = function () {
            this.onReady = function (seetings) {
                this.opts = $.extend({}, Page.defaults, seetings || {});
                this.pageInit();
                return this
            }
        };
        Page.defaults = {};
        Page.prototype = {
            pageInit: function () {
            }
        };
        $.extend(Page.prototype, app.basepage || {}, true);
        return function (options) {
            $.extend(app.ajaxSetupSettings, options.ajaxSetupSettings || {}, true);
            $.ajaxSetup(app.ajaxSetupSettings);
            $.extend(Page.prototype, options || {}, true);
            var result = new Page;
            if (options.ajaxSettings) {
                options.ajaxSettings.beforeSendFn && (app.beforeSendFn = options.ajaxSettings.beforeSendFn);
                options.ajaxSettings.completeFn && (app.completeFn = options.ajaxSettings.completeFn);
                options.ajaxSettings.errorFn && (app.errorFn = options.ajaxSettings.errorFn);
                options.ajaxSettings.ajaxJsonErrorFn && (app.ajaxJsonErrorFn = options.ajaxSettings.ajaxJsonErrorFn)
            }
            return result
        }
    }()
})(window.app, window);