//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace SyncMailCount.ExchangeWebservice {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ManagerWebServiceSoap", Namespace="http://Betternext.com/")]
    public partial class ManagerWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback NewExchangeUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateExchangeUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserAliasOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserExchangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserExchangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisableMailboxOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableMailboxOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableMailboxAndMailboxDataBaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewDistributionGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDistributionGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnableDisGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDistributionGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDistributionGroupModeratedByOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDistributionGroupModeratedByOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDatabaseListOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSensitiveMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateMailContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMailContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerMailCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserMailCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ManagerWebService() {
            this.Url = global::SyncMailCount.Properties.Settings.Default.SyncMailCount_ExchangeWebservice_ManagerWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event NewExchangeUserCompletedEventHandler NewExchangeUserCompleted;
        
        /// <remarks/>
        public event UpdateExchangeUserCompletedEventHandler UpdateExchangeUserCompleted;
        
        /// <remarks/>
        public event UpdateUserAliasCompletedEventHandler UpdateUserAliasCompleted;
        
        /// <remarks/>
        public event UpdateUserExchangeCompletedEventHandler UpdateUserExchangeCompleted;
        
        /// <remarks/>
        public event GetUserExchangeCompletedEventHandler GetUserExchangeCompleted;
        
        /// <remarks/>
        public event GetUserCompletedEventHandler GetUserCompleted;
        
        /// <remarks/>
        public event DisableMailboxCompletedEventHandler DisableMailboxCompleted;
        
        /// <remarks/>
        public event EnableMailboxCompletedEventHandler EnableMailboxCompleted;
        
        /// <remarks/>
        public event EnableMailboxAndMailboxDataBaseCompletedEventHandler EnableMailboxAndMailboxDataBaseCompleted;
        
        /// <remarks/>
        public event NewDistributionGroupCompletedEventHandler NewDistributionGroupCompleted;
        
        /// <remarks/>
        public event GetDistributionGroupCompletedEventHandler GetDistributionGroupCompleted;
        
        /// <remarks/>
        public event EnableDisGroupCompletedEventHandler EnableDisGroupCompleted;
        
        /// <remarks/>
        public event SetDistributionGroupCompletedEventHandler SetDistributionGroupCompleted;
        
        /// <remarks/>
        public event SetDistributionGroupModeratedByCompletedEventHandler SetDistributionGroupModeratedByCompleted;
        
        /// <remarks/>
        public event GetDistributionGroupModeratedByCompletedEventHandler GetDistributionGroupModeratedByCompleted;
        
        /// <remarks/>
        public event GetDatabaseListCompletedEventHandler GetDatabaseListCompleted;
        
        /// <remarks/>
        public event RemoveSensitiveMailCompletedEventHandler RemoveSensitiveMailCompleted;
        
        /// <remarks/>
        public event CreateMailContactCompletedEventHandler CreateMailContactCompleted;
        
        /// <remarks/>
        public event UpdateMailContactCompletedEventHandler UpdateMailContactCompleted;
        
        /// <remarks/>
        public event RemoveContactCompletedEventHandler RemoveContactCompleted;
        
        /// <remarks/>
        public event GetServerMailCountCompletedEventHandler GetServerMailCountCompleted;
        
        /// <remarks/>
        public event GetUserMailCountCompletedEventHandler GetUserMailCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/NewExchangeUser", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NewExchangeUser(System.Guid transactionid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] ref byte[] info, out string strError) {
            object[] results = this.Invoke("NewExchangeUser", new object[] {
                        transactionid,
                        info});
            info = ((byte[])(results[1]));
            strError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NewExchangeUserAsync(System.Guid transactionid, byte[] info) {
            this.NewExchangeUserAsync(transactionid, info, null);
        }
        
        /// <remarks/>
        public void NewExchangeUserAsync(System.Guid transactionid, byte[] info, object userState) {
            if ((this.NewExchangeUserOperationCompleted == null)) {
                this.NewExchangeUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewExchangeUserOperationCompleted);
            }
            this.InvokeAsync("NewExchangeUser", new object[] {
                        transactionid,
                        info}, this.NewExchangeUserOperationCompleted, userState);
        }
        
        private void OnNewExchangeUserOperationCompleted(object arg) {
            if ((this.NewExchangeUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewExchangeUserCompleted(this, new NewExchangeUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/UpdateExchangeUser", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateExchangeUser(System.Guid transactionid, string userAccount, string displayName, string alias, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] info, out string strError) {
            object[] results = this.Invoke("UpdateExchangeUser", new object[] {
                        transactionid,
                        userAccount,
                        displayName,
                        alias,
                        info});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateExchangeUserAsync(System.Guid transactionid, string userAccount, string displayName, string alias, byte[] info) {
            this.UpdateExchangeUserAsync(transactionid, userAccount, displayName, alias, info, null);
        }
        
        /// <remarks/>
        public void UpdateExchangeUserAsync(System.Guid transactionid, string userAccount, string displayName, string alias, byte[] info, object userState) {
            if ((this.UpdateExchangeUserOperationCompleted == null)) {
                this.UpdateExchangeUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateExchangeUserOperationCompleted);
            }
            this.InvokeAsync("UpdateExchangeUser", new object[] {
                        transactionid,
                        userAccount,
                        displayName,
                        alias,
                        info}, this.UpdateExchangeUserOperationCompleted, userState);
        }
        
        private void OnUpdateExchangeUserOperationCompleted(object arg) {
            if ((this.UpdateExchangeUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateExchangeUserCompleted(this, new UpdateExchangeUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/UpdateUserAlias", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateUserAlias(System.Guid transactionid, string userAccount, string alias, out string strError) {
            object[] results = this.Invoke("UpdateUserAlias", new object[] {
                        transactionid,
                        userAccount,
                        alias});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserAliasAsync(System.Guid transactionid, string userAccount, string alias) {
            this.UpdateUserAliasAsync(transactionid, userAccount, alias, null);
        }
        
        /// <remarks/>
        public void UpdateUserAliasAsync(System.Guid transactionid, string userAccount, string alias, object userState) {
            if ((this.UpdateUserAliasOperationCompleted == null)) {
                this.UpdateUserAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserAliasOperationCompleted);
            }
            this.InvokeAsync("UpdateUserAlias", new object[] {
                        transactionid,
                        userAccount,
                        alias}, this.UpdateUserAliasOperationCompleted, userState);
        }
        
        private void OnUpdateUserAliasOperationCompleted(object arg) {
            if ((this.UpdateUserAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserAliasCompleted(this, new UpdateUserAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/UpdateUserExchange", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateUserExchange(System.Guid transactionid, string userAccount, string displayName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] info, out string strError) {
            object[] results = this.Invoke("UpdateUserExchange", new object[] {
                        transactionid,
                        userAccount,
                        displayName,
                        info});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserExchangeAsync(System.Guid transactionid, string userAccount, string displayName, byte[] info) {
            this.UpdateUserExchangeAsync(transactionid, userAccount, displayName, info, null);
        }
        
        /// <remarks/>
        public void UpdateUserExchangeAsync(System.Guid transactionid, string userAccount, string displayName, byte[] info, object userState) {
            if ((this.UpdateUserExchangeOperationCompleted == null)) {
                this.UpdateUserExchangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserExchangeOperationCompleted);
            }
            this.InvokeAsync("UpdateUserExchange", new object[] {
                        transactionid,
                        userAccount,
                        displayName,
                        info}, this.UpdateUserExchangeOperationCompleted, userState);
        }
        
        private void OnUpdateUserExchangeOperationCompleted(object arg) {
            if ((this.UpdateUserExchangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserExchangeCompleted(this, new UpdateUserExchangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/GetUserExchange", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetUserExchange(System.Guid transactionid, string userAccount, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] info, out string strError) {
            object[] results = this.Invoke("GetUserExchange", new object[] {
                        transactionid,
                        userAccount});
            info = ((byte[])(results[1]));
            strError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserExchangeAsync(System.Guid transactionid, string userAccount) {
            this.GetUserExchangeAsync(transactionid, userAccount, null);
        }
        
        /// <remarks/>
        public void GetUserExchangeAsync(System.Guid transactionid, string userAccount, object userState) {
            if ((this.GetUserExchangeOperationCompleted == null)) {
                this.GetUserExchangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserExchangeOperationCompleted);
            }
            this.InvokeAsync("GetUserExchange", new object[] {
                        transactionid,
                        userAccount}, this.GetUserExchangeOperationCompleted, userState);
        }
        
        private void OnGetUserExchangeOperationCompleted(object arg) {
            if ((this.GetUserExchangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserExchangeCompleted(this, new GetUserExchangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/GetUser", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetUser(System.Guid transactionid, string userID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] info, out string strError) {
            object[] results = this.Invoke("GetUser", new object[] {
                        transactionid,
                        userID});
            info = ((byte[])(results[1]));
            strError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAsync(System.Guid transactionid, string userID) {
            this.GetUserAsync(transactionid, userID, null);
        }
        
        /// <remarks/>
        public void GetUserAsync(System.Guid transactionid, string userID, object userState) {
            if ((this.GetUserOperationCompleted == null)) {
                this.GetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserOperationCompleted);
            }
            this.InvokeAsync("GetUser", new object[] {
                        transactionid,
                        userID}, this.GetUserOperationCompleted, userState);
        }
        
        private void OnGetUserOperationCompleted(object arg) {
            if ((this.GetUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/DisableMailbox", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DisableMailbox(System.Guid transactionid, string userID, out string strError) {
            object[] results = this.Invoke("DisableMailbox", new object[] {
                        transactionid,
                        userID});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DisableMailboxAsync(System.Guid transactionid, string userID) {
            this.DisableMailboxAsync(transactionid, userID, null);
        }
        
        /// <remarks/>
        public void DisableMailboxAsync(System.Guid transactionid, string userID, object userState) {
            if ((this.DisableMailboxOperationCompleted == null)) {
                this.DisableMailboxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableMailboxOperationCompleted);
            }
            this.InvokeAsync("DisableMailbox", new object[] {
                        transactionid,
                        userID}, this.DisableMailboxOperationCompleted, userState);
        }
        
        private void OnDisableMailboxOperationCompleted(object arg) {
            if ((this.DisableMailboxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableMailboxCompleted(this, new DisableMailboxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/EnableMailbox", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EnableMailbox(System.Guid transactionid, string userID, string alias, out string strError) {
            object[] results = this.Invoke("EnableMailbox", new object[] {
                        transactionid,
                        userID,
                        alias});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EnableMailboxAsync(System.Guid transactionid, string userID, string alias) {
            this.EnableMailboxAsync(transactionid, userID, alias, null);
        }
        
        /// <remarks/>
        public void EnableMailboxAsync(System.Guid transactionid, string userID, string alias, object userState) {
            if ((this.EnableMailboxOperationCompleted == null)) {
                this.EnableMailboxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableMailboxOperationCompleted);
            }
            this.InvokeAsync("EnableMailbox", new object[] {
                        transactionid,
                        userID,
                        alias}, this.EnableMailboxOperationCompleted, userState);
        }
        
        private void OnEnableMailboxOperationCompleted(object arg) {
            if ((this.EnableMailboxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableMailboxCompleted(this, new EnableMailboxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/EnableMailboxAndMailboxDataBase", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EnableMailboxAndMailboxDataBase(System.Guid transactionid, string userID, string alias, string mailboxdb, out string strError) {
            object[] results = this.Invoke("EnableMailboxAndMailboxDataBase", new object[] {
                        transactionid,
                        userID,
                        alias,
                        mailboxdb});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EnableMailboxAndMailboxDataBaseAsync(System.Guid transactionid, string userID, string alias, string mailboxdb) {
            this.EnableMailboxAndMailboxDataBaseAsync(transactionid, userID, alias, mailboxdb, null);
        }
        
        /// <remarks/>
        public void EnableMailboxAndMailboxDataBaseAsync(System.Guid transactionid, string userID, string alias, string mailboxdb, object userState) {
            if ((this.EnableMailboxAndMailboxDataBaseOperationCompleted == null)) {
                this.EnableMailboxAndMailboxDataBaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableMailboxAndMailboxDataBaseOperationCompleted);
            }
            this.InvokeAsync("EnableMailboxAndMailboxDataBase", new object[] {
                        transactionid,
                        userID,
                        alias,
                        mailboxdb}, this.EnableMailboxAndMailboxDataBaseOperationCompleted, userState);
        }
        
        private void OnEnableMailboxAndMailboxDataBaseOperationCompleted(object arg) {
            if ((this.EnableMailboxAndMailboxDataBaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableMailboxAndMailboxDataBaseCompleted(this, new EnableMailboxAndMailboxDataBaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/NewDistributionGroup", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NewDistributionGroup(System.Guid transactionid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] ref byte[] info, out string strError) {
            object[] results = this.Invoke("NewDistributionGroup", new object[] {
                        transactionid,
                        info});
            info = ((byte[])(results[1]));
            strError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NewDistributionGroupAsync(System.Guid transactionid, byte[] info) {
            this.NewDistributionGroupAsync(transactionid, info, null);
        }
        
        /// <remarks/>
        public void NewDistributionGroupAsync(System.Guid transactionid, byte[] info, object userState) {
            if ((this.NewDistributionGroupOperationCompleted == null)) {
                this.NewDistributionGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewDistributionGroupOperationCompleted);
            }
            this.InvokeAsync("NewDistributionGroup", new object[] {
                        transactionid,
                        info}, this.NewDistributionGroupOperationCompleted, userState);
        }
        
        private void OnNewDistributionGroupOperationCompleted(object arg) {
            if ((this.NewDistributionGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewDistributionGroupCompleted(this, new NewDistributionGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/GetDistributionGroup", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetDistributionGroup(System.Guid transactionid, string groupID, out string strError) {
            object[] results = this.Invoke("GetDistributionGroup", new object[] {
                        transactionid,
                        groupID});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetDistributionGroupAsync(System.Guid transactionid, string groupID) {
            this.GetDistributionGroupAsync(transactionid, groupID, null);
        }
        
        /// <remarks/>
        public void GetDistributionGroupAsync(System.Guid transactionid, string groupID, object userState) {
            if ((this.GetDistributionGroupOperationCompleted == null)) {
                this.GetDistributionGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDistributionGroupOperationCompleted);
            }
            this.InvokeAsync("GetDistributionGroup", new object[] {
                        transactionid,
                        groupID}, this.GetDistributionGroupOperationCompleted, userState);
        }
        
        private void OnGetDistributionGroupOperationCompleted(object arg) {
            if ((this.GetDistributionGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDistributionGroupCompleted(this, new GetDistributionGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/EnableDisGroup", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EnableDisGroup(System.Guid transactionid, string displayName, string account, out string strError) {
            object[] results = this.Invoke("EnableDisGroup", new object[] {
                        transactionid,
                        displayName,
                        account});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EnableDisGroupAsync(System.Guid transactionid, string displayName, string account) {
            this.EnableDisGroupAsync(transactionid, displayName, account, null);
        }
        
        /// <remarks/>
        public void EnableDisGroupAsync(System.Guid transactionid, string displayName, string account, object userState) {
            if ((this.EnableDisGroupOperationCompleted == null)) {
                this.EnableDisGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableDisGroupOperationCompleted);
            }
            this.InvokeAsync("EnableDisGroup", new object[] {
                        transactionid,
                        displayName,
                        account}, this.EnableDisGroupOperationCompleted, userState);
        }
        
        private void OnEnableDisGroupOperationCompleted(object arg) {
            if ((this.EnableDisGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableDisGroupCompleted(this, new EnableDisGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/SetDistributionGroup", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDistributionGroup(System.Guid transactionid, string groupID, string displayName, string account, out string strError) {
            object[] results = this.Invoke("SetDistributionGroup", new object[] {
                        transactionid,
                        groupID,
                        displayName,
                        account});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDistributionGroupAsync(System.Guid transactionid, string groupID, string displayName, string account) {
            this.SetDistributionGroupAsync(transactionid, groupID, displayName, account, null);
        }
        
        /// <remarks/>
        public void SetDistributionGroupAsync(System.Guid transactionid, string groupID, string displayName, string account, object userState) {
            if ((this.SetDistributionGroupOperationCompleted == null)) {
                this.SetDistributionGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDistributionGroupOperationCompleted);
            }
            this.InvokeAsync("SetDistributionGroup", new object[] {
                        transactionid,
                        groupID,
                        displayName,
                        account}, this.SetDistributionGroupOperationCompleted, userState);
        }
        
        private void OnSetDistributionGroupOperationCompleted(object arg) {
            if ((this.SetDistributionGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDistributionGroupCompleted(this, new SetDistributionGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/SetDistributionGroupModeratedBy", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDistributionGroupModeratedBy(System.Guid transactionid, string groupID, bool moderationEnabled, System.Guid[] users, out string strError) {
            object[] results = this.Invoke("SetDistributionGroupModeratedBy", new object[] {
                        transactionid,
                        groupID,
                        moderationEnabled,
                        users});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDistributionGroupModeratedByAsync(System.Guid transactionid, string groupID, bool moderationEnabled, System.Guid[] users) {
            this.SetDistributionGroupModeratedByAsync(transactionid, groupID, moderationEnabled, users, null);
        }
        
        /// <remarks/>
        public void SetDistributionGroupModeratedByAsync(System.Guid transactionid, string groupID, bool moderationEnabled, System.Guid[] users, object userState) {
            if ((this.SetDistributionGroupModeratedByOperationCompleted == null)) {
                this.SetDistributionGroupModeratedByOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDistributionGroupModeratedByOperationCompleted);
            }
            this.InvokeAsync("SetDistributionGroupModeratedBy", new object[] {
                        transactionid,
                        groupID,
                        moderationEnabled,
                        users}, this.SetDistributionGroupModeratedByOperationCompleted, userState);
        }
        
        private void OnSetDistributionGroupModeratedByOperationCompleted(object arg) {
            if ((this.SetDistributionGroupModeratedByCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDistributionGroupModeratedByCompleted(this, new SetDistributionGroupModeratedByCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/GetDistributionGroupModeratedBy", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetDistributionGroupModeratedBy(System.Guid transactionid, string groupID, out string[] users, out string strError) {
            object[] results = this.Invoke("GetDistributionGroupModeratedBy", new object[] {
                        transactionid,
                        groupID});
            users = ((string[])(results[1]));
            strError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetDistributionGroupModeratedByAsync(System.Guid transactionid, string groupID) {
            this.GetDistributionGroupModeratedByAsync(transactionid, groupID, null);
        }
        
        /// <remarks/>
        public void GetDistributionGroupModeratedByAsync(System.Guid transactionid, string groupID, object userState) {
            if ((this.GetDistributionGroupModeratedByOperationCompleted == null)) {
                this.GetDistributionGroupModeratedByOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDistributionGroupModeratedByOperationCompleted);
            }
            this.InvokeAsync("GetDistributionGroupModeratedBy", new object[] {
                        transactionid,
                        groupID}, this.GetDistributionGroupModeratedByOperationCompleted, userState);
        }
        
        private void OnGetDistributionGroupModeratedByOperationCompleted(object arg) {
            if ((this.GetDistributionGroupModeratedByCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDistributionGroupModeratedByCompleted(this, new GetDistributionGroupModeratedByCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/GetDatabaseList", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetDatabaseList(System.Guid transactionid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] info, out string strError) {
            object[] results = this.Invoke("GetDatabaseList", new object[] {
                        transactionid});
            info = ((byte[])(results[1]));
            strError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetDatabaseListAsync(System.Guid transactionid) {
            this.GetDatabaseListAsync(transactionid, null);
        }
        
        /// <remarks/>
        public void GetDatabaseListAsync(System.Guid transactionid, object userState) {
            if ((this.GetDatabaseListOperationCompleted == null)) {
                this.GetDatabaseListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDatabaseListOperationCompleted);
            }
            this.InvokeAsync("GetDatabaseList", new object[] {
                        transactionid}, this.GetDatabaseListOperationCompleted, userState);
        }
        
        private void OnGetDatabaseListOperationCompleted(object arg) {
            if ((this.GetDatabaseListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDatabaseListCompleted(this, new GetDatabaseListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/RemoveSensitiveMail", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveSensitiveMail(System.Guid transactionid, string userMail, string keywords, System.DateTime startTime, System.DateTime endTime, out string resultmessage, out string strError) {
            object[] results = this.Invoke("RemoveSensitiveMail", new object[] {
                        transactionid,
                        userMail,
                        keywords,
                        startTime,
                        endTime});
            resultmessage = ((string)(results[1]));
            strError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveSensitiveMailAsync(System.Guid transactionid, string userMail, string keywords, System.DateTime startTime, System.DateTime endTime) {
            this.RemoveSensitiveMailAsync(transactionid, userMail, keywords, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void RemoveSensitiveMailAsync(System.Guid transactionid, string userMail, string keywords, System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.RemoveSensitiveMailOperationCompleted == null)) {
                this.RemoveSensitiveMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSensitiveMailOperationCompleted);
            }
            this.InvokeAsync("RemoveSensitiveMail", new object[] {
                        transactionid,
                        userMail,
                        keywords,
                        startTime,
                        endTime}, this.RemoveSensitiveMailOperationCompleted, userState);
        }
        
        private void OnRemoveSensitiveMailOperationCompleted(object arg) {
            if ((this.RemoveSensitiveMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSensitiveMailCompleted(this, new RemoveSensitiveMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/CreateMailContact", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateMailContact(System.Guid transactionid, string name, string displayname, string mail, string organizationalUnit, out string strError) {
            object[] results = this.Invoke("CreateMailContact", new object[] {
                        transactionid,
                        name,
                        displayname,
                        mail,
                        organizationalUnit});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateMailContactAsync(System.Guid transactionid, string name, string displayname, string mail, string organizationalUnit) {
            this.CreateMailContactAsync(transactionid, name, displayname, mail, organizationalUnit, null);
        }
        
        /// <remarks/>
        public void CreateMailContactAsync(System.Guid transactionid, string name, string displayname, string mail, string organizationalUnit, object userState) {
            if ((this.CreateMailContactOperationCompleted == null)) {
                this.CreateMailContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateMailContactOperationCompleted);
            }
            this.InvokeAsync("CreateMailContact", new object[] {
                        transactionid,
                        name,
                        displayname,
                        mail,
                        organizationalUnit}, this.CreateMailContactOperationCompleted, userState);
        }
        
        private void OnCreateMailContactOperationCompleted(object arg) {
            if ((this.CreateMailContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateMailContactCompleted(this, new CreateMailContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/UpdateMailContact", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateMailContact(System.Guid transactionid, string name, string displayname, string mail, string organizationalUnit, out string strError) {
            object[] results = this.Invoke("UpdateMailContact", new object[] {
                        transactionid,
                        name,
                        displayname,
                        mail,
                        organizationalUnit});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMailContactAsync(System.Guid transactionid, string name, string displayname, string mail, string organizationalUnit) {
            this.UpdateMailContactAsync(transactionid, name, displayname, mail, organizationalUnit, null);
        }
        
        /// <remarks/>
        public void UpdateMailContactAsync(System.Guid transactionid, string name, string displayname, string mail, string organizationalUnit, object userState) {
            if ((this.UpdateMailContactOperationCompleted == null)) {
                this.UpdateMailContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMailContactOperationCompleted);
            }
            this.InvokeAsync("UpdateMailContact", new object[] {
                        transactionid,
                        name,
                        displayname,
                        mail,
                        organizationalUnit}, this.UpdateMailContactOperationCompleted, userState);
        }
        
        private void OnUpdateMailContactOperationCompleted(object arg) {
            if ((this.UpdateMailContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMailContactCompleted(this, new UpdateMailContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/RemoveContact", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveContact(System.Guid transactionid, string name, string organizationalUnit, out string strError) {
            object[] results = this.Invoke("RemoveContact", new object[] {
                        transactionid,
                        name,
                        organizationalUnit});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveContactAsync(System.Guid transactionid, string name, string organizationalUnit) {
            this.RemoveContactAsync(transactionid, name, organizationalUnit, null);
        }
        
        /// <remarks/>
        public void RemoveContactAsync(System.Guid transactionid, string name, string organizationalUnit, object userState) {
            if ((this.RemoveContactOperationCompleted == null)) {
                this.RemoveContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveContactOperationCompleted);
            }
            this.InvokeAsync("RemoveContact", new object[] {
                        transactionid,
                        name,
                        organizationalUnit}, this.RemoveContactOperationCompleted, userState);
        }
        
        private void OnRemoveContactOperationCompleted(object arg) {
            if ((this.RemoveContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveContactCompleted(this, new RemoveContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/GetServerMailCount", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetServerMailCount(System.DateTime starTime, System.DateTime endTime, out int sendCount, out int receiveCount, out string strError) {
            object[] results = this.Invoke("GetServerMailCount", new object[] {
                        starTime,
                        endTime});
            sendCount = ((int)(results[1]));
            receiveCount = ((int)(results[2]));
            strError = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerMailCountAsync(System.DateTime starTime, System.DateTime endTime) {
            this.GetServerMailCountAsync(starTime, endTime, null);
        }
        
        /// <remarks/>
        public void GetServerMailCountAsync(System.DateTime starTime, System.DateTime endTime, object userState) {
            if ((this.GetServerMailCountOperationCompleted == null)) {
                this.GetServerMailCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerMailCountOperationCompleted);
            }
            this.InvokeAsync("GetServerMailCount", new object[] {
                        starTime,
                        endTime}, this.GetServerMailCountOperationCompleted, userState);
        }
        
        private void OnGetServerMailCountOperationCompleted(object arg) {
            if ((this.GetServerMailCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerMailCountCompleted(this, new GetServerMailCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Betternext.com/GetUserMailCount", RequestNamespace="http://Betternext.com/", ResponseNamespace="http://Betternext.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetUserMailCount(System.DateTime starTime, System.DateTime endTime, string mail, out int sendCount, out int receiveCount, out string strError) {
            object[] results = this.Invoke("GetUserMailCount", new object[] {
                        starTime,
                        endTime,
                        mail});
            sendCount = ((int)(results[1]));
            receiveCount = ((int)(results[2]));
            strError = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserMailCountAsync(System.DateTime starTime, System.DateTime endTime, string mail) {
            this.GetUserMailCountAsync(starTime, endTime, mail, null);
        }
        
        /// <remarks/>
        public void GetUserMailCountAsync(System.DateTime starTime, System.DateTime endTime, string mail, object userState) {
            if ((this.GetUserMailCountOperationCompleted == null)) {
                this.GetUserMailCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserMailCountOperationCompleted);
            }
            this.InvokeAsync("GetUserMailCount", new object[] {
                        starTime,
                        endTime,
                        mail}, this.GetUserMailCountOperationCompleted, userState);
        }
        
        private void OnGetUserMailCountOperationCompleted(object arg) {
            if ((this.GetUserMailCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserMailCountCompleted(this, new GetUserMailCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void NewExchangeUserCompletedEventHandler(object sender, NewExchangeUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewExchangeUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewExchangeUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] info {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void UpdateExchangeUserCompletedEventHandler(object sender, UpdateExchangeUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateExchangeUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateExchangeUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void UpdateUserAliasCompletedEventHandler(object sender, UpdateUserAliasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void UpdateUserExchangeCompletedEventHandler(object sender, UpdateUserExchangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetUserExchangeCompletedEventHandler(object sender, GetUserExchangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] info {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetUserCompletedEventHandler(object sender, GetUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] info {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void DisableMailboxCompletedEventHandler(object sender, DisableMailboxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisableMailboxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisableMailboxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void EnableMailboxCompletedEventHandler(object sender, EnableMailboxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnableMailboxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnableMailboxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void EnableMailboxAndMailboxDataBaseCompletedEventHandler(object sender, EnableMailboxAndMailboxDataBaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnableMailboxAndMailboxDataBaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnableMailboxAndMailboxDataBaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void NewDistributionGroupCompletedEventHandler(object sender, NewDistributionGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewDistributionGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewDistributionGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] info {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetDistributionGroupCompletedEventHandler(object sender, GetDistributionGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDistributionGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDistributionGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void EnableDisGroupCompletedEventHandler(object sender, EnableDisGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnableDisGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnableDisGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void SetDistributionGroupCompletedEventHandler(object sender, SetDistributionGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDistributionGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDistributionGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void SetDistributionGroupModeratedByCompletedEventHandler(object sender, SetDistributionGroupModeratedByCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDistributionGroupModeratedByCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDistributionGroupModeratedByCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetDistributionGroupModeratedByCompletedEventHandler(object sender, GetDistributionGroupModeratedByCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDistributionGroupModeratedByCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDistributionGroupModeratedByCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] users {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetDatabaseListCompletedEventHandler(object sender, GetDatabaseListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDatabaseListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDatabaseListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] info {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void RemoveSensitiveMailCompletedEventHandler(object sender, RemoveSensitiveMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveSensitiveMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveSensitiveMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string resultmessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void CreateMailContactCompletedEventHandler(object sender, CreateMailContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateMailContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateMailContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void UpdateMailContactCompletedEventHandler(object sender, UpdateMailContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMailContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMailContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void RemoveContactCompletedEventHandler(object sender, RemoveContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetServerMailCountCompletedEventHandler(object sender, GetServerMailCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerMailCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerMailCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int sendCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int receiveCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetUserMailCountCompletedEventHandler(object sender, GetUserMailCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserMailCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserMailCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int sendCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int receiveCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
}

#pragma warning restore 1591